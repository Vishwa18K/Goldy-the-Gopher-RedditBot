# -*- coding: utf-8 -*-
"""SPACY-REDDITBOT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ay1_TIMzue0dTnd-O2-a02TCfPJrmhvq
"""

# !pip install -U pip setuptools wheel
# !python -m spacy download en_core_web_s
#!pip install -U sentence-transformers
#from sklearn.metrics.pairwise import cosine_similarity
#!pip install -U spacy
!python -m spacy download en_core_web_trf

import csv
from google.colab import files
import io
uploaded = files.upload()
class UploadFiles:
    def __init__(self, uploaded):
        file_content = uploaded[next(iter(uploaded))]
        self.rows = list(csv.reader(io.StringIO(file_content.decode('utf-8'))))
file_instance = UploadFiles(uploaded)
raw_data = []
for line in file_instance.rows:
    pure_string = ",".join(line)
    raw_data.append(pure_string)

from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
md = SentenceTransformer("sentence-transformers/all-MiniLM-L6-v2")

class Embedder():
    def __init__(self,corpus,query):
        self.query = query
        self.corpus = corpus
    def embed(self):
        embedding2 = []
        embedding1 = md.encode(self.query,convert_to_numpy=True).reshape(1,-1)
        for line in self.corpus:
            embedding2.append(md.encode(line, convert_to_numpy=True).reshape(1, -1))
        return embedding1, embedding2

class Compare():
    def __init__(self,embedding1,embedding2):
        self.embedding1 = embedding1
        self.embedding2 = embedding2
        self.scores = {}

    def compare(self):
        for i in range(len(corpus)):
            similarity_score = float(cosine_similarity(self.embedding1, embedding2[i])[0][0])
            self.scores[corpus[i]] = similarity_score
        return self.scores

class Mean():
    def __init__(self,scores):
        self.scores = scores
        self.mean_calc = 0
    def mean(self):
        for key, value in self.scores.items():
            self.mean_calc += value
        self.mean_calc = self.mean_calc / len(self.scores)
        return self.mean_calc
    def above_mean(self):
        mean_val = self.mean()
        above_mean = []
        for key, value in self.scores.items():
            if value > mean_val:
                above_mean.append(value)
                above_mean.sort(reverse=True)
        return above_mean

class TopMatches:
    def __init__(self, top_scores,scores):
        self.top_scores = top_scores
        self.scores = scores
    def get_top(self):
        final = []
        d2 = {v: k for k, v in self.scores.items()}
        for value in self.top_scores:
            final.append(d2.get(value))
        return final
corpus = raw_data[1:]
query = "undergrad graduation + google workspace access does anyone know how long after graduation you lose access to the google workspace (gmail, google drive, etc.)? Online it says up to one year...."
embeddings = Embedder(corpus,query).embed()
embedding1 = embeddings[0]
embedding2 = embeddings[1]

scores = Compare(embedding1,embedding2).compare()

mean_calc = Mean(scores).mean()
above_mean = Mean(scores).above_mean()

top_matches = TopMatches(above_mean,scores).get_top()
print(top_matches[:10])